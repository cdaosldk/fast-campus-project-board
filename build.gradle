plugins {
	id 'java'
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
}
//
//tasks.withType(JavaCompile).configureEach {
//	options.compilerArgs.add("-parameters")
//}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation ('org.springframework.boot:spring-boot-starter-actuator'
			,	'org.springframework.boot:spring-boot-starter-web'
			,	'org.springframework.boot:spring-boot-starter-data-jpa:'
			,	'org.springframework.boot:spring-boot-starter-data-rest'
			,	'org.springframework.data:spring-data-rest-hal-explorer'
			,	'org.springframework.boot:spring-boot-starter-thymeleaf'
			// 사용자가 만든 프로퍼티에 대한 문서화가 가능해진다
			,	'org.springframework.boot:spring-boot-configuration-processor'
			,	'org.springframework.boot:spring-boot-starter-security'
			, 	'org.springframework.boot:spring-boot-starter-thymeleaf'
			,  'org.thymeleaf.extras:thymeleaf-extras-springsecurity5' )// 타임리프 + 시큐리티는 필수
//	runtimeOnly('com.h2database:h2:',	'com.mysql:mysql-connector-j')
	runtimeOnly('com.h2database:h2:',	'mysql:mysql-connector-java')
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	// queryDsl
	implementation('com.querydsl:querydsl-jpa:5.0.0:jakarta' // 중요
			,	'com.querydsl:querydsl-core' // 중요
			, 	'com.querydsl:querydsl-collections')
	// querydsl ~ gradle로 버전을 자동으로 들어가게 함
	annotationProcessor ("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jpa" //~ 스프링 부트 3이후부터는 jakarta
//	annotationProcessor ("com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta" // querydsl JPAAnnotationProcessor 사용 지정
			,	'jakarta.annotation:jakarta.annotation-api' // java.lang.NoClassDefFoundError (javax.annotation.Generated) 대응 코드
			,	'jakarta.persistence:jakarta.persistence-api' )// java.lang.NoClassDefFoundError (javax.annotation.Entity) 대응 코드
}

tasks.named('test') {
	useJUnitPlatform()
}

// Querydsl 설정부
def generated = 'src/main/generated'

// querydsl QClass 파일 생성 위치를 지정
tasks.withType(JavaCompile).configureEach {
	options.getGeneratedSourceOutputDirectory().set(file(generated))
}

// java source set 에 querydsl QClass 위치 추가
sourceSets {
	main.java.srcDirs += [ generated ]
}

// gradle clean 시에 QClass 디렉토리 삭제
clean {
	delete file(generated)
}
